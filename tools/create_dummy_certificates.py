"""
========================================================
Certificate Chain Generation Script (FOR TESTING ONLY)
========================================================

This script is designed to generate a chain of dummy certificates for testing and development purposes only. 
It creates the following certificate hierarchy:

    Root CA --> Intermediate CA --> Leaf (SSL/TLS) Certificate

- Root Certificate (self-signed)
    - File: 'root_cert.pem'
    - Private Key: 'root_key.pem'
    - Validity: 10 years
    - Use: Acts as the Root Certificate Authority (CA) in the certificate chain.

- Intermediate Certificate (signed by Root CA)
    - File: 'intermediate_cert.pem'
    - Private Key: 'intermediate_key.pem'
    - Validity: 10 years
    - Use: Acts as the Intermediate Certificate Authority (CA) in the certificate chain.

- Leaf Certificate (signed by Intermediate CA)
    - File: 'leaf_cert.pem'
    - Private Key: 'leaf_key.pem'
    - Validity: 2 years and 2 months (825 days)
    - Use: Represents a typical SSL/TLS certificate for a domain, e.g., 'www.example.com'.

NOTE:
- The certificates and keys generated by this script are purely for testing and development purposes.
- **DO NOT USE** these certificates in a production environment as they are self-signed, untrusted, 
  and not secure for real-world use.

HOW TO USE:
1. Install the required Python dependencies:
    pip install cryptography

2. Run the script to generate the certificates and keys:
    python generate_cert_chain.py

3. The generated PEM files will be saved in the current directory:
    - root_cert.pem / root_key.pem
    - intermediate_cert.pem / intermediate_key.pem
    - leaf_cert.pem / leaf_key.pem

Use these files to simulate certificate chains during development and testing of certificate-related features, 
such as SSL/TLS certificate management.

Remember: This script is only a development tool and not a part of the main application.
"""

from cryptography import x509
from cryptography.x509.oid import NameOID
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import hashes, serialization
from cryptography.hazmat.primitives.asymmetric import rsa
from datetime import datetime, timedelta


# Helper function to create private key
def generate_private_key():
    key = rsa.generate_private_key(
        public_exponent=65537,
        key_size=2048,
        backend=default_backend()
    )
    return key


# Helper function to write private key to file
def write_private_key_to_file(key, filename):
    with open(filename, "wb") as f:
        f.write(
            key.private_bytes(
                encoding=serialization.Encoding.PEM,
                format=serialization.PrivateFormat.TraditionalOpenSSL,
                encryption_algorithm=serialization.NoEncryption()
            )
        )


# Helper function to write certificate to file
def write_certificate_to_file(cert, filename):
    with open(filename, "wb") as f:
        f.write(cert.public_bytes(serialization.Encoding.PEM))


# Generate a root certificate (self-signed)
def generate_root_certificate():
    key = generate_private_key()
    subject = issuer = x509.Name([
        x509.NameAttribute(NameOID.COUNTRY_NAME, u"US"),
        x509.NameAttribute(NameOID.STATE_OR_PROVINCE_NAME, u"California"),
        x509.NameAttribute(NameOID.LOCALITY_NAME, u"San Francisco"),
        x509.NameAttribute(NameOID.ORGANIZATION_NAME, u"MyRootCA"),
        x509.NameAttribute(NameOID.COMMON_NAME, u"My Root CA"),
    ])
    root_cert = x509.CertificateBuilder().subject_name(
        subject
    ).issuer_name(
        issuer
    ).public_key(
        key.public_key()
    ).serial_number(
        x509.random_serial_number()
    ).not_valid_before(
        datetime.utcnow()
    ).not_valid_after(
        datetime.utcnow() + timedelta(days=3650)  # 10 years validity
    ).add_extension(
        x509.BasicConstraints(ca=True, path_length=None), critical=True,
    ).sign(key, hashes.SHA256(), default_backend())

    # Write the root key and certificate to files
    write_private_key_to_file(key, "root_key.pem")
    write_certificate_to_file(root_cert, "root_cert.pem")

    return root_cert, key


# Generate an intermediate certificate (signed by the root certificate)
def generate_intermediate_certificate(root_cert, root_key):
    key = generate_private_key()
    subject = x509.Name([
        x509.NameAttribute(NameOID.COUNTRY_NAME, u"US"),
        x509.NameAttribute(NameOID.STATE_OR_PROVINCE_NAME, u"California"),
        x509.NameAttribute(NameOID.LOCALITY_NAME, u"San Francisco"),
        x509.NameAttribute(NameOID.ORGANIZATION_NAME, u"MyIntermediateCA"),
        x509.NameAttribute(NameOID.COMMON_NAME, u"My Intermediate CA"),
    ])
    intermediate_cert = x509.CertificateBuilder().subject_name(
        subject
    ).issuer_name(
        root_cert.subject
    ).public_key(
        key.public_key()
    ).serial_number(
        x509.random_serial_number()
    ).not_valid_before(
        datetime.utcnow()
    ).not_valid_after(
        datetime.utcnow() + timedelta(days=3650)  # 10 years validity
    ).add_extension(
        x509.BasicConstraints(ca=True, path_length=None), critical=True,
    ).sign(root_key, hashes.SHA256(), default_backend())

    # Write the intermediate key and certificate to files
    write_private_key_to_file(key, "intermediate_key.pem")
    write_certificate_to_file(intermediate_cert, "intermediate_cert.pem")

    return intermediate_cert, key


# Generate a leaf certificate (SSL certificate signed by intermediate certificate)
def generate_leaf_certificate(intermediate_cert, intermediate_key):
    key = generate_private_key()
    subject = x509.Name([
        x509.NameAttribute(NameOID.COUNTRY_NAME, u"US"),
        x509.NameAttribute(NameOID.STATE_OR_PROVINCE_NAME, u"California"),
        x509.NameAttribute(NameOID.LOCALITY_NAME, u"San Francisco"),
        x509.NameAttribute(NameOID.ORGANIZATION_NAME, u"MyLeafCert"),
        x509.NameAttribute(NameOID.COMMON_NAME, u"www.example.com"),
    ])
    leaf_cert = x509.CertificateBuilder().subject_name(
        subject
    ).issuer_name(
        intermediate_cert.subject
    ).public_key(
        key.public_key()
    ).serial_number(
        x509.random_serial_number()
    ).not_valid_before(
        datetime.utcnow()
    ).not_valid_after(
        datetime.utcnow() + timedelta(days=825)  # 2 years + 2 months validity
    ).add_extension(
        x509.BasicConstraints(ca=False, path_length=None), critical=True,
    ).sign(intermediate_key, hashes.SHA256(), default_backend())

    # Write the leaf key and certificate to files
    write_private_key_to_file(key, "leaf_key.pem")
    write_certificate_to_file(leaf_cert, "leaf_cert.pem")

    return leaf_cert, key


# Main function to generate root, intermediate, and leaf certificates
def generate_cert_chain():
    print("Generating Root Certificate...")
    root_cert, root_key = generate_root_certificate()

    print("Generating Intermediate Certificate...")
    intermediate_cert, intermediate_key = generate_intermediate_certificate(root_cert, root_key)

    print("Generating Leaf Certificate...")
    generate_leaf_certificate(intermediate_cert, intermediate_key)

    print("Certificates and keys have been generated and saved as PEM files.")


if __name__ == "__main__":
    generate_cert_chain()
